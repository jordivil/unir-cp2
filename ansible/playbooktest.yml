---
- name: Levantar Kubernetes
  hosts: master.unircp2.net
  vars:
    - directorioConfigKube: "/home/ansible/.kube"
    - OS: CentOS_8_Stream
    - VERSION: 1.24
  become: true
# tasks de prueba 
  tasks:
  - name: Existe namespace appcp2
    k8s:
      name: appcp2
      api_version: v1
      kind: Namespace
      state: present
    become: false
  - name: Asignado Volumen persistente
    k8s:

    become: false
  - name: Despliegue Apache
    k8s:
      state: present
      definition:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: httpd-deployment-appcp2
          namespace: appcp2
          labels:
            app: httpd_app_cp2
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: httpd_app_cp2
          template:
            metadata:
              labels:
                app: httpd_app_cp2
            spec:
              containers:
                - name: httpd-container-cp2
                  image: httpd:latest
                  volumeMounts:
                    - name: volumen-nfs
                      mountPath: /var/www/html
                  ports:
                    - containerPort: 80
              volumes:
                - name: volumen-nfs
                  nfs:
                    server: nfs.unircp2.net
                    path: /mnt/vol_kubernetes
    become: false
  
  # - name: Activado puertos firewall Worker
  #   ansible.posix.firewalld:
  #     port: "{{ item  }}"
  #     permanent: yes
  #     state: enabled
  #   with_items:
  #     - "10250/tcp"
  #     - "30000-32767/tcp"
  #     - "8285/udp"
  #     - "8472/udp"
  # - name: recargado servicio firewalld
  #   systemd:
  #     name: firewalld
  #     state: reloaded
  # - name: join Worker al cluster
  #   shell: "{{ join_worker }}"

  # - name: obtenido comando con token para conectar worker
  #   shell: "kubeadm token create --print-join-command"
  #   register: comando_join_worker
  # - debug:
  #     var: comando_join_worker.stdout
 
  # - name: asignado fact para join de worker
  #   set_fact:
  #     join_worker: "{{comando_join_worker.stdout}}"
  # - name: mostrando el fact
  #   debug:
  #     var: join_worker
  # - name: creando directorio temporal
  #   file:
  #     path: "/home/ansible/tmp"
  #     state: directory
  #     group: ansible
  #     owner: ansible
  #     mode: u=rwx,g=rwx,o=rwx
  #     recurse: yes
  # - name: obteniendo yaml definición políticas de red en Master
  #   get_url:
  #     url:  https://docs.projectcalico.org/manifests/canal.yaml
  #     dest: /home/ansible/tmp/canal.yaml
  # - name: definicion políticas de red en Master
  #   k8s:
  #     state: present
  #     src: /home/ansible/tmp/canal.yaml
  #   become: false
  # - name: reiniciar hosts
  #   ansible.builtin.reboot:
  #     msg: "Estamos reiniciando..."
  #     connect_timeout: 5
  #     reboot_timeout: 600
  #     pre_reboot_delay: 5
  #     post_reboot_delay: 30
  #     test_command: whoami
  # - name: Obteniendo yaml Ingress Controller HAProxy
  #   get_url:
  #     url:  https://raw.githubusercontent.com/haproxytech/kubernetes-ingress/master/deploy/haproxy-ingress.yaml
  #     dest: /home/ansible/tmp/haproxy-ingress.yaml
  # - name: Instalacion Ingress Controller HAProxy
  #   k8s:
  #     state: present
  #     src: /home/ansible/tmp/haproxy-ingress.yaml
  #   become: false
  
    
  
  

  


    # - name: Activado puertos firewall Master
    #   ansible.posix.firewalld:
    #     port: "{{ item  }}"
    #     permanent: yes
    #     state: enabled
    #   with_items:
    #     - "6443/tcp"
    #     - "2379-2380/tcp"
    #     - "10250-10252/tcp"
    #     - "10255/tcp"
    # - name: habilitado cortafuegos para workers
    #   ansible.posix.firewalld:
    #     rich_rule: "rule family=ipv4 source address={{ hostvars[inventory_hostname]['ansible_host'] }}/32 port port=6443 protocol=tcp accept"
    #     permanent: yes
    #     state: enabled
    # - name: recargado servicio firewalld
    #   systemd:
    #     name: firewalld
    #     state: reloaded
    # - name: configurar kubeadm
    #   shell: "kubeadm config images pull"
    # - name: instala plugin CNI y define red de pods
    #   shell: "kubeadm init --pod-network-cidr {{ subred }}"
    #   args:
    #     creates: /etc/kubernetes/admin.conf
    #   register: respuesta_init_cni  
    # - debug:
    #     var: respuesta_init_cni['stdout']
    # - name: Directorio config Kube creado
    #   file:
    #     path: "{{ directorioConfigKube }}"
    #     state: directory
    #     group: ansible
    #     owner: ansible
    #     mode: u=rwx,g=rwx,o=rwx
    #     recurse: yes
    # - name: copiado archivo conf
    #   copy:
    #     src: /etc/kubernetes/admin.conf
    #     remote_src: yes
    #     dest: /home/ansible/.kube/config
    #     mode: u=rwx,g=rwx,o=rwx
    #     owner: ansible
    #     group: ansible
    
  # - name: Configurado /etc/yum.repos.d/kubernetes.repo
  #   copy:
  #     dest: /etc/yum.repos.d/kubernetes.repo
  #     mode: u=rwx,g=rwx,o=rwx
  #     content: |
  #       [kubernetes]
  #       name=Kubernetes
  #       baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-$basearch
  #       enabled=1
  #       gpgcheck=1
  #       gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
  #       exclude=kubelet kubeadm kubectl
  # - name: Instalado kubernetes
  #   dnf:
  #     name: "{{ item }}"
  #     state: installed
  #     disable_excludes: kubernetes
  #   with_items:
  #   - kubelet
  #   - kubeadm
  #   - kubectl
  # - name: servicio kubelet activo y habilitado
  #   service:
  #     name: kubelet
  #     state: started
  #     enabled: yes


  # - name: Módulo Br_netfilter presente 
  #   modprobe:
  #     name: br_netfilter
  #     state: present
  # - name: Transparent Masquerading
  #   firewalld:
  #     masquerade: yes
  #     permanent: yes
  #     state: enabled
  # - name: Reiniciado firewall
  #   systemd:
  #     name: firewalld
  #     state: reloaded
  # - name: presente /etc/sysctl.d/k8s.conf
  #   copy:
  #     dest: /etc/sysctl.d/k8s.conf
  #     mode: u=rwx,g=rwx,o=rwx
  #     content: |
  #       net.bridge.bridge-nf-call-ip6tables = 1
  #       net.bridge.bridge-nf-call-iptables = 1
  #       net.ipv4.ip_forward = 1
  #   notify: Recarga conf sistema
  # - name: desactivando swap
  #   shell: "{{ item }}"
  #   with_items:
  #     - swapoff -a 
  #     - sed -i '/swap/d' /etc/fstab
  # - name: repos Centos
  #   get_url:
  #     url: "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{OS}}/devel:kubic:libcontainers:stable.repo"
  #     dest: "/etc/yum.repos.d/devel:kubic:libcontainers:stable.repo"
  #   register: repo_output_centos  
  # - name: repos cri-o
  #   get_url:
  #     url: "https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:{{VERSION}}/{{OS}}/devel:kubic:libcontainers:stable:cri-o:{{VERSION}}.repo"
  #     dest: "/etc/yum.repos.d/devel:kubic:libcontainers:stable:cri-o:{{VERSION}}.repo"
  #   register: repo_output_cri_o
  # - debug:
  #     msg: 
  #       - "respuesta Repos Centos: {{repo_output_centos.msg}}"
  #       - "respuesta Repos Cri-o: {{repo_output_cri_o.msg}}"
  # - name: Instalado y actualizado Cri-o
  #   dnf:
  #     name: cri-o
  #     state: latest
  # - name: presente /etc/modules-load.d/crio.conf
  #   copy:
  #     dest: /etc/modules-load.d/crio.conf
  #     mode: u=rwx,g=rwx,o=rwx
  #     content: |
  #       overlay
  #       br_netfilter
  # - name: servicio cri-o activo y habilitado
  #   service:
  #     name: crio
  #     state: started
  #     enabled: yes

  # handlers:
  # - name:  Recarga conf sistema
  #   shell: sysctl --system
